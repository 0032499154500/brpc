#edit-mode: -*- python -*-
#coding:gbk

#注意：在此目录下你无法comake2 -UB，comake2会抱怨baidu-rpc是本目录的父节点，
#如果你要运行本项目，得先在baidu-rpc目录下comake2 -UB后回到本目录comake2 -P。
#你自己的项目不会有这个问题（因为不会是baidu-rpc的子目录）

#到代码树根目录的相对路径
WORKROOT('../../../../../')

#C++编译参数.
CPPFLAGS('-std=c++0x -g -DNDEBUG -O2 -pipe -W -Wall -Werror -fPIC -fno-omit-frame-pointer -Wno-deprecated -Wno-unused-parameter')
#在目前的版本中，只要用到baidu-rpc的项目都强烈建议加下面一行,以避免在gcc4下的误优化
CPPFLAGS('-D__const__=')

#为了方便本例通过comake2 -UB下载依赖，我们直接import上层baidu-rpc的依赖，
##在你自己的项目中，你得把下面三行改成CONFIGS('public/baidu-rpc@ci-base')
INCPATHS('../../')
LIBS(GLOB('../../output/lib/lib*.a'))
ImportConfigsFrom('../../')

#分别开启cpu profiler和heap profiler，后者要求使用tcmalloc
CPPFLAGS('-DBRPC_ENABLE_CPU_PROFILER -DBRPC_ENABLE_HEAP_PROFILER')
CONFIGS('third-64/tcmalloc@1.7.0.200',Libraries('lib/libtcmalloc_and_profiler.a'))
#若要开启HTTPS，建议静态链接1.0.2h以上版本的openssl，
#同时编译public/baidu-rpc和自己的Application，确保没有安全漏洞.
#CONFIGS('third-64/openssl@1.0.2.6123')

#链接参数，静态链接openssl时，务必去除-lssl -lcrypto.
LDFLAGS('-lpthread -lssl -lcrypto -lrt -ldl -lz')

#这是支持.proto作为源文件必须的
PROTOC(ENV.WorkRoot() + "/third-64/protobuf/bin/protoc")

#可执行文件
Application('http_client', Sources('http_client.cpp'))
Application('benchmark_http', Sources('benchmark_http.cpp'))
Application('http_server', Sources('http.proto http_server.cpp'))
